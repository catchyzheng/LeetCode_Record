#/**
# * @param a a list of non-null integers, in ascending order
# * @param b a list of non-null integers, in ascending order
# * @return the integers that are contained in either a or b, in ascending order
# */
# a = 1 3 5
# b = 1 7 10
#
# a = [], b = [2, 3, 4], U = [1,2,2,3,3,4]
# a = null, b = []
# a = [1,2,3,3], b = [3,4,5,6], U = [1,2,3,3,3,4,5,6]

# a = [1] b = [1, 2]

def union(a, b):
    p1, p2 =0, 0
    res = []
    if a is None or len(a) == 0:
        return b
    if b is None or len(b) == 0:
        return a
    while p1 < len(a) or p2 < len(b):
        if p1 == len(a):
            while p2 < len(b):
                res.append(b[p2])
                p2 += 1
            break
        
        if p2 == len(b):
            while p1 < len(a):
                res.append(a[p1])
                p1 += 1
            break
        
        if a[p1] == b[p2]: 
            res.append(a[p1])
            res.append(b[p2])
            p1 += 1; p2 += 1
            
        else:
            if a[p1] > b[p2]:
                res.append(b[p2])
                p2 += 1
            else:
                res.append(a[p1])
                p1 += 1
    return res

print union([1, 2, 3], [2, 3, 4])
#/**
# * @param a a list of non-null integers, in ascending order
# * @param b a list of non-null integers, in ascending order
# * @return the integers that are contained in both a and b, in ascending order
# */

# [1, 2, 2, 3], [2, 3, 4] return [2,3]
# [1, 2, 2, 3], [2, 2, 3, 4] return [2, 2, 3]

# [1,2,3, 4], [4,5,6]  RES = [4]
# a = none, b = [] , return none []


# if a = none AND b = none -> return None
# if a = none XOR b = none -> return []

# a = [1] b = [1, 2]

def intersect(a, b):
    p1, p2 =0, 0
    res = []
    if a is None and b is None:
        return None
    if a is None or b is None:
        return []
    while p1 < len(a) and p2 < len(b):
        #if p1 == len(a) or p2 == len(b):
        #    break
        
        if a[p1] == b[p2]: 
            res.append(b[p2])
            p1 += 1; p2 += 1
        else:
            if a[p1] > b[p2]:
                p2 += 1
            else:
                p1 += 1
    return res # [1]

print intersect([1,2,3], [4,5,6])
