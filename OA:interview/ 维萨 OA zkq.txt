
def Cmp(self, other):
    dict = {
        'Jan': 1,
        'Feb': 2,
        'Mar': 3,
        'Apr': 4,
        'May': 5,
        'Jun': 6,
        'Jul': 7,
        'Aug': 8,
        'Sep': 9,
        'Oct': 10,
        'Nov': 11,
        'Dec': 12
    }
    if self[2] != other[2]:
        return cmp(self[2], other[2])
    elif dict[self[1]] != dict[other[1]]:
        return cmp(dict[self[1]], dict[other[1]])
    else:
        return cmp(self[0], other[0]) 

def sortDates(dates):
    # Write your code here
    dict = {
        'Jan': 1,
        'Feb': 2,
        'Mar': 3,
        'Apr': 4,
        'May': 5,
        'Jun': 6,
        'Jul': 7,
        'Aug': 8,
        'Sep': 9,
        'Oct': 10,
        'Nov': 11,
        'Dec': 12
    }

    n = len(dates)
    date_list = [[] for _ in range(n)]
    for i in range(n):
        date_list[i] = dates[i].split()
    '''
    for [x, y, z] in date_list:
        x = int(x)
        y = dict[y]
        z = int(z)    
    '''
    date_list.sort(cmp = Cmp)
    #date_list = sorted(date_list, cmp = Cmp)
    res = []
    for ele in date_list:
        print ele
        s = ele[0] + ' '
        s += ele[1] + ' '; s += ele[2]
        res.append(s)
    return res

----------------------------

class Solution(object):
    def __init__(self):
        
        self.k = 2
        self.total = 10
        self.limit = 7 
        self.list = []
        self.list2 = []
        self.ss = ""
        
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        length = len(s)
        self.ss = s
        for i in range(length):
            if s[i] == '?':
                self.list.append(i)
            else:
                self.list2.append(i)
        
        cur_res = [0 for _ in range(self.k)]
        res = []

        self.permute_limit_helper(self.k, 0, self.total, self.limit, cur_res=cur_res, res=res)
        
        for ele in res:
            print ele
        return 0
        
    def permute_limit_helper(self, k, level, total, limit, cur_res=None, res=None):
        if level == k:
            #  pdb.set_trace()
            if total == 0:
                tmp_ans_s = ['_' for _ in range(len(self.ss))]
                ans_s = ""
                tmp_i = 0
                for p in self.list:
                    tmp_ans_s[p] = str(cur_res[tmp_i])
                    tmp_i += 1
                for p in self.list2:
                    tmp_ans_s[p] = self.ss[p]
                for ele in tmp_ans_s:
                    ans_s += ele
                res.append(ans_s)
                #res.append(cur_res) 
            return 

        for i in range(1, limit + 1):
            cur_res[level] = i
            self.permute_limit_helper(k, level + 1, total - i, limit, cur_res=copy.deepcopy(cur_res), res=res)


    #def permute_limit(k, total, limit):

===========other way===============

public static List<String> string(int total, int day, String s) {
            int count = 0;
            for (int i = 0; i < s.length();i++) {
                    if(s.charAt(i) != '?')
                    count = count + Character.getNumericValue(s.charAt(i));
                    }

            List<String> result = new LinkedList<>();
            StringBuilder temp = new StringBuilder(s);
            int left = total - count;
            System.out.println(left);
            backtrack(result,temp,left,0, s,day);
            return result;

    }

    private static void backtrack(List<String> result, StringBuilder temp, int left,int index, String s,int day) {
        if(index == 7) {
            if (left == 0) {
                //System.out.println(temp);
                String ss = temp.toString();
                result.add(ss);
                return;
            }
        }
            else {
                if(s.charAt(index) != '?') {
                    backtrack(result,temp,left,index+1,s,day);
                } else {
                    for(int i = day; i >=0; i--) {
                        //int in = index;
                        //System.out.println(temp);
                        temp.setCharAt(index,(char)(i + '0'));
                        //System.out.println(temp);
                        backtrack(result,temp,left - i,index+1,s,day);
                        temp.setCharAt(index,'?');

                    }
                }
            }



    }
