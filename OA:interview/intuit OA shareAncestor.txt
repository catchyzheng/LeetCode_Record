import sys

def shareAncestor(id_pair, pairs):
  # IMPLEMENTATION GOES HERE
  node = []
  id_ = {}
  max_ = 0
  '''
  tmp1, tmp2 = int(id_pair[0]), int(id_pair[1])
  if tmp1 > max_: max_ = tmp1
  if tmp2 > max_: max_ = tmp2
  '''
  for pair in pairs:
    pair[0], pair[1] = int(pair[0]), int(pair[1])
    if pair[0] not in node:
      node.append(pair[0])
      id_[pair[0]] = len(node) - 1
    if pair[1] not in node:
      node.append(pair[1])
      id_[pair[1]] = len(node) - 1
    #if pair[0] > max_: max_ = pair[0]
    #if pair[1] > max_: max_ = pair[1]
  #n = len(node)
  
  child = [[] for _ in range(len(node))]
  parent = [[] for _ in range(len(node))]
  
  for pair in pairs:
    child[id_[int(pair[0])]].append(id_[int(pair[1])])
    parent[id_[int(pair[1])]].append(id_[int(pair[0])])
  
  x, y = id_[int(id_pair[0])], id_[int(id_pair[1])]
  if len(parent[x]) == 0 or len(parent[y]) == 0: return False
  
  for i in range(len(node)):
    if len(parent[i]) == 0 and len(child[i])!=0: 
      parent[i].append(i)
  
  ans = -1
  for ele in parent[x]:
    if ele in parent[y]:
      ans = ele; break
  
  query = [x, y]
  have_ans = True
  while have_ans and ans < 0:
    cnt = 0
    for ele in query:
      if ele in parent[ele]: cnt += 1
    if cnt == len(query):
      have_ans = False; break
    new_query = []
    for t in query:
      new_query += parent[t]
    query = new_query
    for i in range(len(query) - 1):
      for j in range(i+1, len(query)):
        for x in parent[query[i]]:
          if x in parent[query[j]]:
            ans = x; break
            
  if ans != -1: return True
  else: return False